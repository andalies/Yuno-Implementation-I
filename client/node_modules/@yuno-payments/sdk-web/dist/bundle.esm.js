/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const EnvToEnvironmentSuffix = {
    dev: '.dev',
    staging: '.staging',
    sandbox: '.sandbox',
    prod: '',
};
/**
 * Returns the URL for the SDK script based on the provided options object.
 * @param options - An object containing environment and version.
 *   - env: The environment to use ('dev', 'staging', 'sandbox', 'prod'). Defaults to 'prod'.
 *   - version: The SDK version to use (e.g., 'v1.2'). Defaults to 'v1.2' if not provided.
 * @returns The full URL to the SDK script.
 */
const getUrl = (options = {}) => {
    var _a;
    const { env = 'prod', version = 'v1.2' } = options;
    const environmentSuffix = (_a = EnvToEnvironmentSuffix[env]) !== null && _a !== void 0 ? _a : '';
    const baseUrl = `https://sdk-web${environmentSuffix}.y.uno/${version}/main.js`;
    return baseUrl;
};

const SCRIPT_ID = 'yuno-script';
const injectScript = (_a) => __awaiter(void 0, [_a], void 0, function* ({ url }) {
    if (document.getElementById(SCRIPT_ID)) {
        if (window.Yuno) {
            return true;
        }
        else {
            return new Promise((resolve, reject) => {
                window.addEventListener('yuno-sdk-ready', () => {
                    resolve(true);
                });
                window.addEventListener('yuno-sdk-error', (event) => {
                    reject(event.detail);
                });
            });
        }
    }
    const head = document.getElementsByTagName('head')[0];
    const js = document.createElement('script');
    js.id = SCRIPT_ID;
    js.src = url;
    js.async = true;
    js.defer = true;
    return new Promise((resolve, reject) => {
        window.addEventListener('yuno-sdk-ready', () => {
            resolve(true);
        });
        js.onerror = (error) => {
            const event = new CustomEvent('yuno-sdk-error', { detail: error });
            window.dispatchEvent(event);
            reject(new Error(`Failed to load script: ${url} - ${error}`));
        };
        head.appendChild(js);
    });
});

const loadScript = (props) => __awaiter(void 0, void 0, void 0, function* () {
    const url = getUrl(props);
    yield injectScript({ url });
    return window.Yuno;
});

export { loadScript };
//# sourceMappingURL=bundle.esm.js.map
