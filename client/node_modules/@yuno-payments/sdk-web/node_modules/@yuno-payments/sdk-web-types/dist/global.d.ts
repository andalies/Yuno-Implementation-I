interface Customer {
    first_name?: string | null;
    last_name?: string | null;
    email?: string | null;
    gender?: string | null;
    device_fingerprint?: string | null;
    third_party_session_id?: string | null;
    document?: {
        document_number: string;
        document_type: string;
    } | null;
    phone?: {
        country_code: string;
        number: string;
    } | null;
    billing_address?: {
        address_line_1: string;
        address_line_2: string;
        city: string;
        country: string;
        state: string;
        zip_code: string;
    } | null;
    shipping_address?: {
        address_line_1: string;
        address_line_2: string;
        country: string;
        state: string;
        city: string;
        zip_code: string;
    } | null;
}

interface Card {
    number: string | null;
    expiration_month: number | null;
    expiration_year: number | null;
    security_code: string | null;
    holder_name: string | null;
    type: string | null;
}
interface OneTimeToken$1 {
    token: string;
    vaulted_token: string | null;
    vault_on_success: boolean;
    type: string;
    card_data?: {
        holder_name: string;
        iin: string;
        lfd: string;
        number_length: number;
        security_code_length: number;
        brand: string;
        issuer_name: string;
        issuer_code: string | null;
        category: string | null;
        type: string;
    };
    customer: Customer;
}
type ApiClientCard = {
    save?: boolean;
    detail?: Partial<Card>;
    three_d_secure?: {
        three_d_secure_setup_id?: string | null;
    };
    installment?: {
        id: string;
        value: number;
        amount?: {
            currency: string;
            value: string;
            total_value: string;
        } | null;
    };
};
declare enum StatusEnrollment {
    CREATED = "CREATED",
    EXPIRED = "EXPIRED",
    REJECTED = "REJECTED",
    READY_TO_ENROLL = "READY_TO_ENROLL",
    ENROLL_IN_PROCESS = "ENROLL_IN_PROCESS",
    UNENROLL_IN_PROCESS = "UNENROLL_IN_PROCESS",
    ENROLLED = "ENROLLED",
    DECLINED = "DECLINED",
    CANCELED = "CANCELED",
    ERROR = "ERROR",
    UNENROLLED = "UNENROLLED"
}

type ApiClientPaymentArgs = {
    checkout_session?: string;
    country_code: string;
};
type GenerateTokenArgs$1 = {
    checkout_session?: string;
    payment_method: {
        type: string;
        vaulted_token?: string | null;
        card?: ApiClientCard;
        customer?: Customer;
        device_fingerprint?: string | null;
        third_party_session_id?: string | null;
    };
};
type GenerateHeadlessTokenArgs = Omit<GenerateTokenArgs$1, 'checkout_session'> & {
    account_id: string;
};
type GetThreeDSecureChallengeReturn = {
    url: string;
};
type GenerateToken = (args: GenerateTokenArgs$1) => Promise<OneTimeToken$1>;
type GenerateHeadlessToken = (args: GenerateHeadlessTokenArgs) => Promise<OneTimeToken$1>;
type GetThreeDSecureChallenge = (checkoutSession?: string) => Promise<GetThreeDSecureChallengeReturn>;
type ApiClientPaymentReturn = {
    generateToken: GenerateToken;
    getThreeDSecureChallenge: GetThreeDSecureChallenge;
    generateHeadlessToken: GenerateHeadlessToken;
};
type ApiClientPayment = (args: ApiClientPaymentArgs) => Promise<ApiClientPaymentReturn>;

type ApiClientEnrollArgs = {
    customer_session: string;
    country_code: string;
};
type ContinueEnrollmentArgs = {
    customer_session?: string;
    payment_method: {
        type: string;
        card?: ApiClientCard;
        customer?: Customer;
    };
};
type ContinueEnrollmentReturn = {
    vaulted_token: string;
    status: string;
    customer: {
        session: StatusEnrollment;
    };
};
type ApiClientEnrollReturn = {
    continueEnrollment: (args: ContinueEnrollmentArgs) => Promise<ContinueEnrollmentReturn>;
};
type ApiClientEnroll = (args: ApiClientEnrollArgs) => Promise<ApiClientEnrollReturn>;

type DeviceFingerprint = {
    providerId: string;
    sessionId: string;
};
type ExecuteFraudCheckArgs = {
    checkoutSession: string;
    /**
     * @default 'CARD'
     */
    paymentType?: string;
};
type ExecuteFraudCheckReturn<TStatus = 'success' | 'error'> = TStatus extends 'success' ? {
    status: TStatus;
    deviceFingerprints: DeviceFingerprint[];
} : {
    status: TStatus;
    error: Error;
    deviceFingerprints: [];
};
type ExecuteFraudCheck = (args: ExecuteFraudCheckArgs) => Promise<ExecuteFraudCheckReturn>;

type CookieKey = 'deviceId';
type CookieConfig = {
    name: string;
};
type CookiesConfig = Record<CookieKey, CookieConfig>;
type InitializeOptions = {
    cookies: CookiesConfig | undefined;
};

type Status = 'FAIL' | 'REJECT' | 'SUCCEEDED' | 'PROCESSING' | 'READY';
type EnrollmentStatus = 'CREATED' | 'EXPIRED' | 'REJECTED' | 'READY_TO_ENROLL' | 'ENROLL_IN_PROCESS' | 'UNENROLL_IN_PROCESS' | 'ENROLLED' | 'DECLINED' | 'CANCELED' | 'ERROR' | 'UNENROLLED';

type Name = 'cvv' | 'pan' | 'expiration' | 'cardLoadPreview';
interface FontFile {
    weight: number;
    url: string;
}
interface ExternalFont {
    family_name: string;
    files: FontFile[];
}
type Installment = {
    installmentId: string;
    installment: number;
    amount?: {
        currency: string;
        value: string;
        total_value: string;
    };
};
interface CardIINResponse {
    id: string;
    iin: string;
    scheme: string;
    issuer_name: string;
    issuer_code: string;
    brand: string;
    type: string;
    category: string;
    country_code: string;
    country_name: string;
    website: string;
    phone: {
        country_code: string;
        number: string;
    };
    address: {
        address_line_1: string;
        address_line_2: string | null;
        city: string;
        country: string;
        state: string;
        zip_code: string;
    };
}
declare enum CardNetwork {
    DISCOVER = "DISCOVER",
    MAESTRO = "MAESTRO",
    MASTERCARD = "MASTERCARD",
    DINERS_CLUB_INTERNATIONAL = "DINERS_CLUB_INTERNATIONAL",
    DINERS = "DINERS",
    AMERICAN_EXPRESS = "AMERICAN_EXPRESS",
    VISA = "VISA",
    UATP = "UATP",
    SODEXO = "SODEXO",
    VR_VALE_REFEICAO = "VR_VALE_REFEICAO",
    DEFAULT = "default"
}
type CardConfig$1 = {
    numberRegex: RegExp;
    maxLength: number;
    minLength: number;
    cvvRegex: RegExp;
    scheme: CardNetwork;
    brand: CardNetwork;
    altCardLogo: string;
    cardLogo: string;
    cardInputIcon: string;
    groupSizes: number[];
    placeHolder: string;
    cardType: CardType;
    styles: {
        backgroundColor: string;
        valueColor: string;
        labelColor: string;
        magneticStripeColor: string;
        signatureBackgroundColor: string;
        signatureLineColor: string;
    };
};
type InstallmentTypesList = {
    type: string;
    description: string;
    id: string;
};
interface FullInstallmentInfo {
    installment: number;
    rate: string;
    amount?: {
        currency: string;
        value: string;
        total_value: string;
    };
    type?: string;
    first_installment_deferral?: string;
}
interface FullInstallmentsInfo {
    installments: FullInstallmentInfo[];
    id: string;
    filter_by?: string;
    types_list?: InstallmentTypesList[];
}
type OnChangeArgs = {
    error: boolean;
    data?: {
        installments?: Installment[];
        cardIIN?: CardIINResponse;
        isCardIINLoading: boolean;
        isInstallmentLoading: boolean;
        cardConfig: CardConfig$1 | null;
        fullInstallmentsInfo?: FullInstallmentsInfo;
    };
};
type CardLoadPreviewSecureConfig = {
    showFrontCard?: boolean;
    defaultCardConfig?: CardConfig$1;
    focusCvv?: boolean;
    number?: string;
    cardHolderName?: string;
    showCardIcon?: boolean;
    onRenderedSecureField?(): void;
    language?: string;
    isEnrolled?: boolean;
};
type ValidationTypeSecureFields = 'on_change' | 'on_blur' | 'on_blur_full';
type DesignType = 'float-label' | 'float-label-static' | 'label-placeholder';
type CreateArgs = {
    name: Name;
    options: {
        label?: string;
        showError?: boolean;
        onChange?(onChangeArgs: OnChangeArgs): void;
        onBlur?(): void;
        onFocus?(): void;
        onRenderedSecureField?(): void;
        styles?: string;
        placeholder?: string;
        errorMessage?: string;
        requiredErrorMessage?: string;
        validationType?: ValidationTypeSecureFields;
        designType?: DesignType;
        errorIcon?: string | null;
        enableFocusAnimation?: boolean;
        defaultCardConfig?: CardConfig$1;
        externalFonts?: ExternalFont[];
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
    };
    cardLoadPreviewConfig?: CardLoadPreviewSecureConfig;
};
type GetElement = {
    name: Name;
};
interface GenerateTokenArgs {
    checkoutSession?: string;
    cardHolderName: string;
    saveCard?: boolean;
    customer?: Partial<Customer>;
    installment?: {
        id: string;
        value: number;
        amount?: {
            currency: string;
            value: string;
            total_value: string;
        };
    };
    cardType?: string;
}
interface GenerateVaultedToken {
    customerSession?: string;
    cardHolderName: string;
    customer?: Partial<Customer>;
    cardType?: string;
}
interface OneTimeToken {
    token: string;
    vaulted_token: string | null;
    vault_on_success: boolean;
    type: string;
    card_data?: {
        holder_name: string;
        iin: string;
        lfd: string;
        number_length: number;
        security_code_length: number;
        brand: string;
        issuer_name: string;
        issuer_code: string | null;
        category: string | null;
        type: string;
    };
    customer: Customer;
}
interface VaultedToken {
    code: string;
    idempotency_key: string;
    organization_code: string;
    account_code: string;
    customer_session: string;
    name: string;
    description: string;
    status: Status;
    type: string;
    category: string;
    provider: {
        type: string;
        action: string;
        token: string;
        enrollment_id: string | null;
        provider_status: string | null;
        redirect: string | null;
        raw_response: unknown;
    };
    created_at: Date;
    updated_at: Date;
}
type CardType = 'CREDIT' | 'DEBIT' | 'VOUCHER';
interface SecureField {
    render(elementSelector: string): Promise<void>;
    focus(): Promise<void>;
    validate(): Promise<boolean>;
    unmountSync(): Promise<void>;
    clearValue(): Promise<void>;
    setError(errorMessage: string): Promise<void>;
    setCardType(cardType: CardType): Promise<void>;
    clearError(): Promise<void>;
    resetFields(): Promise<void>;
    toggleFocusCvv(value: boolean): Promise<void>;
    toggleFrontCardVisibility(value: boolean): Promise<void>;
    setCardHolderName(value: string): Promise<void>;
}
interface SecureFields {
    create({ name, options }: CreateArgs): SecureField;
    getElement({ name }: GetElement): SecureField;
    generateToken(params: GenerateTokenArgs): Promise<string>;
    generateTokenWithInformation(params: GenerateTokenArgs): Promise<OneTimeToken>;
    generateVaultedToken(params: GenerateVaultedToken): Promise<string>;
    generateVaultedTokenWithInformation(params: GenerateVaultedToken): Promise<VaultedToken>;
    unmountSync(): void;
}

interface ButtonTextCard {
    cardForm?: {
        enrollmentSubmitButton?: string;
        paymentSubmitButton?: string;
    };
    cardStepper?: {
        numberCardStep?: {
            nextButton?: string;
        };
        cardHolderNameStep?: {
            prevButton?: string;
            nextButton?: string;
        };
        expirationDateStep?: {
            prevButton?: string;
            nextButton?: string;
        };
        cvvStep?: {
            prevButton?: string;
            nextButton?: string;
        };
    };
}
interface TextsCustom {
    customerForm?: {
        submitButton?: string;
    };
    paymentOtp?: {
        sendOtpButton?: string;
    };
}
type Font = {
    familyName: string;
    files: FontFile[];
};
interface CardConfig {
    styles?: string;
    type?: 'extends' | 'step';
    cardSaveEnable?: boolean;
    vaultOnSuccess?: boolean;
    texts?: ButtonTextCard;
    documentEnable?: boolean;
    isCreditCardProcessingOnly?: boolean;
    /**
     * This property helps to load fonts into the card form, due to the fact that the fields are rendered as iframes.
     * With this, you can use the fonts in the styles property.
     *
     * @example
     * ```ts
     * fonts: [
     *  {
     *    familyName: 'Arial',
     *    files: ['https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap']
     *  }
     * ]
     * ```
     */
    fonts?: Font[];
}
interface FormElementSelector {
    apmForm?: string;
    actionForm?: string;
}
interface RenderMode {
    type: 'modal' | 'element';
    elementSelector?: string | FormElementSelector;
}
declare enum ExternalPaymentButtonsTypes {
    PAYPAL = "paypal"
}
type ExternalPaymentButtons = {
    [key in ExternalPaymentButtonsTypes]: {
        elementSelector: string;
    };
};
type LoadingType = 'DOCUMENT' | 'ONE_TIME_TOKEN';
type Language = 'es' | 'en' | 'pt' | 'de' | 'fil' | 'fr' | 'id' | 'it' | 'ms' | 'nl' | 'pl' | 'po' | 'ru' | 'sv' | 'th' | 'tr' | 'vi' | 'zh-CN' | 'zh-TW';
interface YunoConfig {
    publicApiKey: string;
    checkoutSession: string;
    customerSession: string;
    language: Language;
    countryCode: string;
    elementSelector?: string;
    vaultedToken?: string;
    type?: string;
    renderMode?: RenderMode;
    externalPaymentButtons?: ExternalPaymentButtons;
    card?: CardConfig;
    showLoading?: boolean;
    showPaymentStatus?: boolean;
    c2p?: {
        enableRememberMe?: boolean;
        recognitionToken?: string;
        c2pFlowType?: string;
        onRecognitionTokenCreated?(recognitionToken: string): void;
        onRecognitionTokenDeleted?(): void;
    };
    texts?: TextsCustom;
    issuersFormEnable?: boolean;
    automaticallyUnmount?: boolean;
    cardFormUnfoldedEnable?: boolean;
    isDynamicViewEnabled?: boolean;
    showOnlyThesePaymentMethods?: string[];
    showPayButton?: boolean;
    yunoCreatePayment?: (oneTimeToken: string, tokenWithInformation: OneTimeToken) => void;
    yunoPaymentMethodSelected?: (arg: {
        type: string;
        name: string;
    }) => void;
    yunoPaymentResult?: (status: Status) => void;
    yunoError?: (message: string, data?: any) => void;
    onRendered?(): void;
    onOneTimeTokenCreationStart?(): void;
    yunoEnrollmentStatus?(params: {
        status: EnrollmentStatus;
        vaultedToken?: string;
    }): void;
    /**
     * @deprecated
     */
    onLoading?(args: {
        isLoading: boolean;
        type: LoadingType;
    }): void;
}
type StartCheckoutArgs = Omit<YunoConfig, 'yunoEnrollmentStatus' | 'customerSession' | 'publicApiKey'>;
type MountEnrollmentLiteArgs = Pick<YunoConfig, 'language' | 'countryCode' | 'renderMode' | 'yunoEnrollmentStatus' | 'yunoError' | 'showLoading' | 'onRendered' | 'onOneTimeTokenCreationStart' | 'onLoading'>;
type mountFraudArgs = Pick<YunoConfig, 'yunoCreatePayment' | 'yunoError' | 'language' | 'checkoutSession'>;
interface MountCheckoutArgs {
    paymentMethodType?: string;
    vaultedToken?: string;
    category?: string;
}
interface MountCheckoutLiteArgs {
    paymentMethodType?: string;
    vaultedToken?: string;
}
interface MountSeamlessCheckoutLiteArgs {
    paymentMethodType?: string;
    vaultedToken?: string;
}
interface SecureFieldsArgs {
    countryCode: string;
    checkoutSession?: string;
    installmentEnable?: boolean;
    customerSession?: string;
    enableMultiplesCard?: boolean;
}
type SecureFieldInstance = SecureFields;
type OnChangeDataSF = OnChangeArgs['data'];
type CreateArgsSF = CreateArgs;
interface MountStatusPaymentArgs {
    checkoutSession: string;
    language: Language;
    countryCode: string;
    yunoPaymentResult?: YunoConfig['yunoPaymentResult'];
    yunoError?: YunoConfig['yunoError'];
}
type ContinuePaymentResponse = {
    action: 'REDIRECT_URL';
    type: string;
    redirect: {
        init_url: string;
        success_url: string;
        error_url: string;
    };
} | null;
type ContinuePaymentArgs = {
    /**
     * @default true
     */
    showPaymentStatus?: boolean;
};
type StartSeamlessCheckoutArgs = Omit<StartCheckoutArgs, 'yunoCreatePayment'>;
type MountSeamlessCheckoutArgs = MountCheckoutArgs;
interface YunoInstance {
    startCheckout(args: StartCheckoutArgs): Promise<void>;
    startSeamlessCheckout(args: StartSeamlessCheckoutArgs): Promise<void>;
    mountCheckout(args?: MountCheckoutArgs): Promise<void>;
    mountSeamlessCheckout(args?: MountSeamlessCheckoutArgs): Promise<void>;
    mountCheckoutLite(args: MountCheckoutLiteArgs): Promise<void>;
    mountSeamlessCheckoutLite(args: MountSeamlessCheckoutLiteArgs): Promise<void>;
    updateCheckoutSession(checkout: string): Promise<void>;
    submitOneTimeTokenForm(): Promise<void>;
    startPayment(): Promise<void>;
    continuePayment(args?: ContinuePaymentArgs): Promise<ContinuePaymentResponse>;
    notifyError(): Promise<void>;
    mountEnrollmentLite(args: MountEnrollmentLiteArgs): Promise<void>;
    showLoader(): Promise<void>;
    hideLoader(): Promise<void>;
    updateCheckoutSession(checkoutSession: string): Promise<void>;
    mountFraud(args: mountFraudArgs): Promise<void>;
    mountStatusPayment(args: MountStatusPaymentArgs): Promise<void>;
    secureFields(args: SecureFieldsArgs): Promise<SecureFieldInstance>;
    apiClientPayment: ApiClientPayment;
    apiClientEnroll: ApiClientEnroll;
    executeFraudCheck: ExecuteFraudCheck;
}
interface Yuno {
    initialize(publicApiKey: string, applicationSession?: string, options?: InitializeOptions): Promise<YunoInstance>;
}

declare const Yuno: Yuno;
