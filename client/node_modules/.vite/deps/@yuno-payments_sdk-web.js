import "./chunk-EQCVQC35.js";

// node_modules/@yuno-payments/sdk-web/dist/bundle.esm.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var EnvToEnvironmentSuffix = {
  dev: ".dev",
  staging: ".staging",
  sandbox: ".sandbox",
  prod: ""
};
var getUrl = (options = {}) => {
  var _a;
  const { env = "prod", version = "v1.2" } = options;
  const environmentSuffix = (_a = EnvToEnvironmentSuffix[env]) !== null && _a !== void 0 ? _a : "";
  const baseUrl = `https://sdk-web${environmentSuffix}.y.uno/${version}/main.js`;
  return baseUrl;
};
var SCRIPT_ID = "yuno-script";
var injectScript = (_a) => __awaiter(void 0, [_a], void 0, function* ({ url }) {
  if (document.getElementById(SCRIPT_ID)) {
    if (window.Yuno) {
      return true;
    } else {
      return new Promise((resolve, reject) => {
        window.addEventListener("yuno-sdk-ready", () => {
          resolve(true);
        });
        window.addEventListener("yuno-sdk-error", (event) => {
          reject(event.detail);
        });
      });
    }
  }
  const head = document.getElementsByTagName("head")[0];
  const js = document.createElement("script");
  js.id = SCRIPT_ID;
  js.src = url;
  js.async = true;
  js.defer = true;
  return new Promise((resolve, reject) => {
    window.addEventListener("yuno-sdk-ready", () => {
      resolve(true);
    });
    js.onerror = (error) => {
      const event = new CustomEvent("yuno-sdk-error", { detail: error });
      window.dispatchEvent(event);
      reject(new Error(`Failed to load script: ${url} - ${error}`));
    };
    head.appendChild(js);
  });
});
var loadScript = (props) => __awaiter(void 0, void 0, void 0, function* () {
  const url = getUrl(props);
  yield injectScript({ url });
  return window.Yuno;
});
export {
  loadScript
};
//# sourceMappingURL=@yuno-payments_sdk-web.js.map
