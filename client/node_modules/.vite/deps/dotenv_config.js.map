{
  "version": 3,
  "sources": ["browser-external:os", "../../../../node_modules/dotenv/lib/main.js", "../../../../node_modules/dotenv/lib/env-options.js", "../../../../node_modules/dotenv/lib/cli-options.js", "../../../../node_modules/dotenv/config.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"os\" has been externalized for browser compatibility. Cannot access \"os.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\nfunction resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n", "/* @flow */\n\n// ../config.js accepts options via environment variables\nconst options = {}\n\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n  options.encoding = process.env.DOTENV_CONFIG_ENCODING\n}\n\nif (process.env.DOTENV_CONFIG_PATH != null) {\n  options.path = process.env.DOTENV_CONFIG_PATH\n}\n\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n  options.debug = process.env.DOTENV_CONFIG_DEBUG\n}\n\nmodule.exports = options\n", "/* @flow */\n\nconst re = /^dotenv_config_(encoding|path|debug)=(.+)$/\n\nmodule.exports = function optionMatcher (args /*: Array<string> */) {\n  return args.reduce(function (acc, cur) {\n    const matches = cur.match(re)\n    if (matches) {\n      acc[matches[1]] = matches[2]\n    }\n    return acc\n  }, {})\n}\n", "/* @flow */\n\n(function () {\n  require('./lib/main').config(\n    Object.assign(\n      {},\n      require('./lib/env-options'),\n      require('./lib/cli-options')(process.argv)\n    )\n  )\n})()\n"],
  "mappings": "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",
  "names": []
}
